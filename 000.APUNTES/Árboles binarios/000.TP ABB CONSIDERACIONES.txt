TP ABB consideraciones
-----------------------
-----------------------

* podemos usar strcmp() como funcion de comparacion

* la funcion de comparacion no puede ser NULL

* funcion visitar(char* clave, void* dato, void extra)

* recordar caso base "if (nodo == NULL) return;"

* para hacer las pruebas NO INSERTAR ELEMENTOS ORDENADOS, insertar elementos lo más aleatorios posible, debido a que insertar en orden degenera en lista y el recorrido del árbol tarda mucho

* para clonar un árbol utilizamos recorrido preorder

* mostrar los elementos con recorrido inorder devuelve las claves ordenadas

* para borrar los elementos sí o sí usamos postorder (porque sino perdemos referencias)
------------------------
ITERADOR EXTERNO

* iter_ver_actual() devuelve la clave, no el dato

* ver ppt del iterador de ABB

* el iterador externo usará implementación inorder (no lo usaremos para borrar elementos)

* para hacer un recorrido por niveles usamos una cola
------------------------
ITERADORES POR RANGOS (IN ORDER)

* Orden del iterador? O(k), donde k <= n

-----------
¿TODO MUY LINDO PERO, COMO SE ALMACENAN LAS CLAVES EN UN ABB?

* Recorremos por clave, no por dato
* Las claves son alfanuméricas (char*)
* Los strings pueden tener cualquier largo
* Como los strings pueden tener cualquier largo, no hace falta hashearlos
* Como los strings pueden tener cualquier largo, necesitamos una función de comparación de strings
* "Bárbara" nos pasa la función de comparación de strings

EN RESUMEN, EJEMPLOS DE CLAVES (CLAVES FINALES, ALMACENADAS EN MEMORIA):
* Arreglo  -->>  0,1,2,3,4...
* Hash     -->>  "aa0", "ab2", "cef", "d3e"...
* ABB      -->>  "Carlitos", "Juan", "María Magdalena", "2"...  (se necesita una función que defina cuál es mayor a cual)
