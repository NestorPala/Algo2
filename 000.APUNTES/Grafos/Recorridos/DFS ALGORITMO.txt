DFS PASOS


1. Hacemos una tabla de Padre, Orden y Visitados
	* Padre: 	diccionario (clave: nodo, valor: padre)
	* Orden: 	diccionario (clave: nodo, valor: orden)
	* Visitados:	set(nodo) (usamos set porque es O(1))

2. Elegimos un vertice aleatorio para comenzar


3. Agregamos el primer vertice a la tabla con los valores

		Padre			Orden			Visitados
		----------------	-----------------	---------
		    1: None		      1: 0		    1


4. Buscamos todos los adyacentes del nodo actual. Vemos, para cada uno de sus nodos adyacentes, si ya esta visitado:
	* Si el nodo ya esta visitado, no hacemos nada. Pasamos a otro nodo adyacente.
	* Si el nodo NO esta visitado, seguimos con el paso 5.
	* Si todos los nodos adyacentes ya estan visitados, se termino la llamada recursiva y volvemos al nodo padre, se repite el paso 4
	* Si todos los nodos adyacentes ya estan visitados y estamos en el primero, se termino el algoritmo.

5. Si el nodo adyacente no esta visitado, lo agregamos a la tabla con los valores:

		Padre			Orden			Visitados
		----------------	-----------------	---------
		    1: None		      1: 0		    1
		       .			.		    .
		       .			.	            .
		       .			.	            .
		X: Nodo a traves	X: El orden de su	    X
		   del cual		   padre + 1
		   llegue a X


6. Volvemos al paso 4 para este nuevo nodo.
--------------------------------------------------------------------------------------------------------------------------
RESUMEN


DFS(grafo, origen)
	* Pasos 1 a 3
	* DFS_REC(grafo, origen, visitados, padres, orden)

DFS_REC(grafo, nodo, visitados, padres, orden)
	* Paso 4
	* Paso 5
	* Paso 6  -->  DFS_REC()

--------------------------------------------------------------------------------------------------------------------------
DFS PARA GRAFOS DE VARIAS PARTES:	* Grafos no dirigidos con mas de una componente conexa
					* Grafos dirigidos con componentes debilmente conexas


DFS(grafo, origen)
	* Paso 1
	* for (vertice in grafo) 
		* if (vertice not in visitados)
			* Pasos 2 y 3
			* DFS_REC(grafo, origen, visitados, padres, orden)

DFS_REC(grafo, nodo, visitados, padres, orden)
	* Paso 4
	* Paso 5
	* Paso 6  -->  DFS_REC()

--------------------------------------------------------------------------------------------------------------------------
COMPLEJIDAD

El DFS se puede implementar igual que BFS pero con una pila; dependiendo del caso sera mejor implementar DFS con recursion o con una pila. Luego, es facil deducir que su complejidad es igual que la de BFS: O(V+E). Pero la justificacion real es que recorremos todos los vertices una vez y todas las aristas una o dos veces, dependiendo del caso. 

El orden O(V+E) es porque implementamos el grafo utilizando una lista de adyacencias, con diccionarios de diccionarios.

